#ifdef CLASS_M
#define N 4
#define ITER 4
#define ref 0.5307707005734e-4
#endif

#ifdef CLASS_S
#define N 32
#define ITER 4
#define ref 0.5307707005734e-4
#endif

#ifdef CLASS_W
#define N 128
#define ITER 4
#define ref 0.6467329375339e-5
#endif

#ifdef CLASS_A
#define N 256
#define ITER 4
#define ref 0.2433365309069e-5
#endif

#ifdef CLASS_B
#define N 256
#define ITER 20
#define ref 0.1800564401355e-5
#endif

#ifdef CLASS_C
#define N 512
#define ITER 20
#define ref 0.5706732285740e-6
#endif

#ifdef CLASS_D
#define N 1024
#define ITER 50
#define ref 0.1583275060440e-9
#endif

use StdIO: all;
use Math: all;
use Array: all;
use Benchmarking: all;

#if defined(CLASS_S) || defined(CLASS_W) || defined(CLASS_A)
  #define S(z) Sa(z)
#else
  #define S(z) Sb(z)
#endif

#ifdef SPECSINLINE
specialize double[3,3,3]       gen_weights(double[4] r);
#endif
#ifdef ISINLINE
inline
#else
noinline
#endif
double[.,.,.] gen_weights(double[4] cs)
{
  return {iv -> cs[sum(abs(iv - [1, 1, 1]))] | iv < [3, 3, 3]};
}

#ifdef SPECSINLINE
specialize double[*]       relax(double[4,4,4] s, double[3,3,3] w);
specialize double[*]       relax(double[2,2,2] s, double[3,3,3] w);
specialize double[*]       relax(double[.,.,.] s, double[3,3,3] w);
#endif
#ifdef ISINLINE
inline
#else
noinline
#endif
double[d:shp] relax(double[d:shp] x, double[d:wshp] w)
{
  return {iv -> sum({jv -> w[jv] * x[mod(iv + jv - wshp / 2, shp)]})
             | iv < shp};
}

#ifdef SPECSINLINE
specialize double[*]       relax_mg(double[4,4,4] x, double[4] cs);
specialize double[*]       relax_mg(double[2,2,2] x, double[4] cs);
#endif
#ifdef ISINLINE
inline
#else
noinline
#endif
double[.,.,.] relax_mg(double[.,.,.] x, double[4] cs)
{
  return relax(x, gen_weights(cs));
}

specialize double[512,512,512] coarse2fine(double[256,256,256] r);
specialize double[256,256,256] coarse2fine(double[128,128,128] r);
specialize double[128,128,128] coarse2fine(double[64,64,64] r);
specialize double[64,64,64]    coarse2fine(double[32,32,32] r);
specialize double[32,32,32]    coarse2fine(double[16,16,16] r);
specialize double[16,16,16]    coarse2fine(double[8,8,8] r);
specialize double[8,8,8]       coarse2fine(double[4,4,4] r);
specialize double[4,4,4]       coarse2fine(double[2,2,2] r);
#ifdef ISINLINE
inline
#else
noinline
#endif
double[*] coarse2fine(double[*] z)
{
  return {iv -> z[iv / 2] | iv < 2 * shape(z) step [2, 2, 2]};
}


#ifdef SPECS
specialize double[256,256,256] fine2coarse(double[512,512,512] r);
specialize double[128,128,128] fine2coarse(double[256,256,256] r);
specialize double[64,64,64]    fine2coarse(double[128,128,128] r);
specialize double[32,32,32]    fine2coarse(double[64,64,64] r);
specialize double[16,16,16]    fine2coarse(double[32,32,32] r);
specialize double[8,8,8]       fine2coarse(double[16,16,16] r);
specialize double[4,4,4]       fine2coarse(double[8,8,8] r);
specialize double[2,2,2]       fine2coarse(double[4,4,4] r);
#endif
#ifdef ISINLINE
inline
#else
noinline
#endif
double[*] fine2coarse(double[*] r)
{
  return {iv -> r[2 * iv] | iv < shape(r) / 2};
}


#ifdef SPECSINLINE
specialize double[512,512,512] A(double[512,512,512] r);
specialize double[256,256,256] A(double[256,256,256] r);
specialize double[128,128,128] A(double[128,128,128] r);
specialize double[64,64,64]    A(double[64,64,64] r);
specialize double[32,32,32]    A(double[32,32,32] r);
specialize double[16,16,16]    A(double[16,16,16] r);
specialize double[8,8,8]       A(double[8,8,8] r);
specialize double[4,4,4]       A(double[4,4,4] r);
#endif
#ifdef ISINLINE
inline
#else
noinline
#endif
double[.,.,.] A(double[.,.,.] a)
{
  return relax_mg(a, [-8d/3d, 0d, 1d/6d, 1d/12d]);
}

#ifdef SPECS
specialize double[256,256,256] P(double[512,512,512] r);
specialize double[128,128,128] P(double[256,256,256] r);
specialize double[64,64,64]    P(double[128,128,128] r);
specialize double[32,32,32]    P(double[64,64,64] r);
specialize double[16,16,16]    P(double[32,32,32] r);
specialize double[8,8,8]       P(double[16,16,16] r);
specialize double[4,4,4]       P(double[8,8,8] r);
specialize double[2,2,2]       P(double[4,4,4] r);
#endif
double[.,.,.] P(double[.,.,.] a)
{
  return fine2coarse(relax_mg(a, [1d/2d, 1d/4d, 1d/8d, 1d/16d]));
}

#ifdef SPECS
specialize double[512,512,512] Q(double[256,256,256] r);
specialize double[256,256,256] Q(double[128,128,128] r);
specialize double[128,128,128] Q(double[64,64,64] r);
specialize double[64,64,64]    Q(double[32,32,32] r);
specialize double[32,32,32]    Q(double[16,16,16] r);
specialize double[16,16,16]    Q(double[8,8,8] r);
specialize double[8,8,8]       Q(double[4,4,4] r);
specialize double[4,4,4]       Q(double[2,2,2] r);
#endif
double[.,.,.] Q(double[.,.,.] a)
{
  return relax_mg(coarse2fine (a), [1d, 1d/2d, 1d/4d, 1d/8d]);
}

#ifdef SPECSINLINE
specialize double[512,512,512] Sa(double[512,512,512] r);
specialize double[256,256,256] Sa(double[256,256,256] r);
specialize double[128,128,128] Sa(double[128,128,128] r);
specialize double[64,64,64]    Sa(double[64,64,64] r);
specialize double[32,32,32]    Sa(double[32,32,32] r);
specialize double[16,16,16]    Sa(double[16,16,16] r);
specialize double[8,8,8]       Sa(double[8,8,8] r);
specialize double[4,4,4]       Sa(double[4,4,4] r);
#endif
#ifdef ISINLINE
inline
#else
noinline
#endif
double[.,.,.] Sa(double[.,.,.] a)
{
  return relax_mg(a, [-3d/8d, 1d/32d, -1d/64d, 0d]);
}

#ifdef SPECSINLINE
specialize double[512,512,512] Sb(double[512,512,512] r);
specialize double[256,256,256] Sb(double[256,256,256] r);
specialize double[128,128,128] Sb(double[128,128,128] r);
specialize double[64,64,64]    Sb(double[64,64,64] r);
specialize double[32,32,32]    Sb(double[32,32,32] r);
specialize double[16,16,16]    Sb(double[16,16,16] r);
specialize double[8,8,8]       Sb(double[8,8,8] r);
specialize double[4,4,4]       Sb(double[4,4,4] r);
#endif
#ifdef ISINLINE
inline
#else
noinline
#endif
double[.,.,.] Sb(double[.,.,.] a)
{
  return relax_mg(a, [-3d/17d, 1d/33d, -1d/61d, 0d]);
}

#ifdef SPECS
specialize double[512,512,512] M(double[512,512,512] r);
specialize double[256,256,256] M(double[256,256,256] r);
specialize double[128,128,128] M(double[128,128,128] r);
specialize double[64,64,64]    M(double[64,64,64] r);
specialize double[32,32,32]    M(double[32,32,32] r);
specialize double[16,16,16]    M(double[16,16,16] r);
specialize double[8,8,8]       M(double[8,8,8] r);
specialize double[4,4,4]       M(double[4,4,4] r);
#endif
noinline
double[.,.,.] M(double[.,.,.] r)
{
  rs = P(r);
  zs = M(rs);
  z  = Q(zs);
  r  = r - A(z);
  z  = z + S(r);

  return z;
}

double[2,2,2] M(double[2,2,2] r)
{
  return S(r);
}

noinline
double MG(double[N,N,N] v)
{
  u = genarray([N, N, N], 0d);
  for (i = 0; i < ITER; i++) {
    r = v - A(u);
    u = u + M(r);
  }

  return L2(v - A(u));
}

#ifdef ISINLINE
inline
#else
noinline
#endif
double L2 (double[.,.,.] r)
{
  return sqrt(sum(r * r) / prod(tod(shape(r))));
}

int main()
{
  i_mg = getInterval("mg", 2);

  v = {[i, j, k] -> sin(tod(i) / tod(N) + tod(j) / tod(N) + tod(k) / tod(N))
                 | [i, j, k] < [N, N, N]};

  start(i_mg);
  r = MG(v);
  end(i_mg);
  time, unit = returnResultUnit(i_mg);
  fprintf(stderr, "Calculation took %f %s\n", time, unit);
  printf("%f\n",
      58d * tod(ITER) * tod(N) * tod(N) * tod(N) * 1e-9 / tod(time), unit);

  fprintf(stderr, "Residual: %.17e\n", r);
  return 0;
}
